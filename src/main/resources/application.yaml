jwt:
  secret-key: ${JWT_KEY}

server:
  error:
    whitelabel:
      enabled: false

domain: ${DOMAIN}

spring:
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GMAIL_ADDRESS}
    password: ${GMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

---

spring:
  config:
    activate:
      on-profile: test

  jpa:
    defer-datasource-initialization: false
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 100
    open-in-view: false
    database-platform: org.hibernate.dialect.H2Dialect

  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:account;MODE=MySQL;
    username: SA
    password:

  sql:
    init:
      mode: never

cloud:
  aws:
    credentials:
      accessKey:  ${AWS_ACCESS_KEY_ID}
      secretKey:  ${AWS_SECRET_ACCESS_KEY}
    s3:
      bucket: ${BUCKET_NAME}
      dir: /image
    region:
      static: ap-northeast-2
    stack:
      auto: false

---

spring:
  config:
    activate:
      on-profile: dev

  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 100
    open-in-view: false
    database-platform: org.hibernate.dialect.MariaDBDialect

  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://${DB_HOST}:${DB_PORT}/filmdoms
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  sql:
    init:
      mode: always

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${OAUTH_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH_GOOGLE_CLIENT_SECRET}
            scope: email
            redirect-uri: "{baseUrl}/front/oauth2/google"
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

cloud:
  aws:
    credentials:
      accessKey:  ${AWS_ACCESS_KEY_ID}
      secretKey:  ${AWS_SECRET_ACCESS_KEY}
    s3:
      bucket: ${BUCKET_NAME}
      dir: /image
    region:
      static: ap-northeast-2
    stack:
      auto: false

---

# 로컬 환경에서 테스트시 사용할 프로파일
# CommunityApplication 을 우클릭하고, [그 외 실행/디버그], [실행 구성 수정] 선택 후에, 활성화된 프로파일에 local을 입력한다.
spring:
  config:
    activate:
      on-profile: local

  h2:
    console:
      enabled: true
#     localhost:8080/${path}로 H2DB 접속
      path: /h2-console

  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 100
    open-in-view: false
    database-platform: org.hibernate.dialect.H2Dialect

  datasource:
    driver-class-name: org.h2.Driver
    # JDBC URL을 jdbc:h2:mem:filmdoms 로 설정후 Connect를 누르면 DB에 접근 가능
    url: jdbc:h2:mem:filmdoms;MODE=MySQL;
    username: SA
    password:

  sql:
    init:
      mode: always

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${OAUTH_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH_GOOGLE_CLIENT_SECRET}
            scope: email
            redirect-uri: "{baseUrl}/front/oauth2/google"
  data:
    redis:
      host: localhost
      port: 6379

cloud:
  aws:
    credentials:
      accessKey:  ${AWS_ACCESS_KEY_ID}
      secretKey:  ${AWS_SECRET_ACCESS_KEY}
    s3:
      bucket: ${BUCKET_NAME}
      dir: /image
    region:
      static: ap-northeast-2
    stack:
      auto: false
